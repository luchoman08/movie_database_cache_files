#! /usr/bin/env python
# -*- coding: utf-8 -*-
from urllib.request import urlopen
from io import BytesIO
import gzip
import json
from enum import Enum
import os.path
BASE_URL = "http://files.tmdb.org/p/exports"
CACHE_FOLDER = "cache_files"
import datetime
class TMDBResource(Enum):
    TVSERIES = 'tv_series'    
    MOVIE = 'movie'   
    PERSON = 'person'
    PRODUCTION_COMPANIES = 'production_company'
def extract_popularity(json):
    """Extract popularity from json cache file from TMDB list of resources
    Args:
        json(json): json list of TMDB resources
    Returns:
        popularity(float): Popularity of the given resource in json
    """
    try:
        return float(json['popularity'])
    except KeyError:
        return 0
def get_generated_file_name(resource, extension = 'json.gz'):
    """Get the gz generated file name of the last day
    Args:
    resource(TMDBResource): the resource than you want obtain the url
    extension(str): file extension for name of file (json.gz or gz)
    Return:
    file_name(str):  file name in TMDB cache file format
    """
    return resource.value  + '_ids' +  get_end_file_name_by_date() + '.' + extension

def get_url_of_file(resource_name):
    """Returns the url of file exported daily by TMDB, based in what resourse
    your want
    Args:
        resource_name(TMDBResource): the resource than you want obtain the url
    Return:
        url(str): the url of the file generated with the ids of the resourse requested,
        generated the day before today generated by TMDB 
    """
    url = BASE_URL + '/' + get_generated_file_name(resource_name, extension='json.gz') 
    print(url)
    return url

def getOrderedJsonResource(resource):
    """Return ordered json of resources from TMDB resources cache,
    also have a local cache for files of the same day
    Args:
        resources(TMDBResource)
    Return:
        ordered_resources(TMDBResource)
    """
    print(isCached(resource))
    if(isCached(resource)):
        return loadJsonCachedFileResource(resource)
    else:
        url = get_url_of_file(resource)
        json_list_of_resources = web_gz_to_json(url, resource)
        json_ordered = sorted(json_list_of_resources,key=extract_popularity, reverse=True)
        saveJsonToCache(resource, json_ordered)
        return json_ordered

def isCached(resource):
    """Return true if the cached file of TMDB was downloaded before, at same day
    Args:
        resources(TMDBResource)
    Return:
        isCached?(boolean)
    """
    return os.path.exists(CACHE_FOLDER + '/' + get_generated_file_name(resource, extension='json'))

def getJsonTvSeriesIds():
    """Download the daily gz backup of all movies in tmdb
    Returns:
        list_of_elements(list): json list than contain all the objects in file downloaded from url, ordered by popularity
            never can be empty
    """
    return getOrderedJsonResource(TMDBResource.TVSERIES)
def getJsonProductionCompanies():
    """Download the daily gz backup of all movies in tmdb
    Returns:
        list_of_elements(list): json list than contain all the objects in file downloaded from url, ordered by popularity
            never can be empty
    """
    return getOrderedJsonResource(TMDBResource.PRODUCTION_COMPANIES)
      
def getJsonMoviesIds():
    """Download the daily gz backup of all movies in tmdb
    Returns:
        list_of_elements(list): json list than contain all the objects in file downloaded from url, ordered by popularity
            never can be empty
    """
    return getOrderedJsonResource(TMDBResource.MOVIE)

def getJsonPersonIds():
    """Download the daily gz backup of all movies in tmdb
    Returns:
        list_of_elements(list): json list than contain all the objects in file downloaded from url, ordered by popularity
            never can be empty
    """
    return getOrderedJsonResource(TMDBResource.PERSON)
def zero_format(number):
    """Return a zero starts format for days and months, ej: day 1 of month
    will be converted to 01 string, at same with month
    Args:
        number(int): Number than represents day of the month or month of the year
    Return:
        zero_format(str): Str than represents day of the month with 0 at start
        if the value of number is minor to 10, number in other wise
    """
    if (number < 10 and number > 1):
        return "0" + str(number)
    else:
        return str(number)
        
def get_end_file_name_by_date():
    """Get end of a file name than you want name with the end representing
    the actual date, the file is of past day, not actual day for avoid conflicts
    Returns: 
        end_file_name(str): end of file name. Format: _MM_DD_YYYY 
    """
    date = datetime.datetime.now()
    return '_' + str(zero_format(date.month)) + '_' + str(zero_format(date.day - 1)) + '_' + str(date.year)

def web_gz_to_json(url, resource=None):
    """Download a web gziped file contain json objects and return it into json
    The gziped file should have one json object per line, not 
    a list of json
    Args:
        url (str): Url of the resourse
        resource(TMDBResource)
    Returns:
        list_of_elements(list): json list than contain all the objects in file downloaded from url
            can be empty
    """
    response = urlopen(url)
    compressedFile = BytesIO()
    compressedFile.write(response.read())
    #
    # Set the file's current position to the beginning
    # of the file so that gzip.GzipFile can read
    # its contents from the top.
    #
    compressedFile.seek(0)

    decompressedFile = gzip.GzipFile(fileobj=compressedFile, mode='r')
    json_bytes = decompressedFile.read()
    json_str = json_bytes.decode('utf-8') 
    json_ready = "[" + json_str.replace("\n",",") [:-1]+ "]"
    return json.loads(json_ready)
    
def loadJsonCachedFileResource(resource):
    if( isCached(resource) ):
        with open(CACHE_FOLDER + '/' + get_generated_file_name(resource, extension='json')) as json_file:
            return json.load(json_file)
def saveJsonToCache(resource, json_data):
    text_file = open(CACHE_FOLDER + '/' + get_generated_file_name(resource, extension='json'), "w+")
    json.dump(json_data, text_file)
    text_file.close()
print (getJsonProductionCompanies()[0])
print (getJsonMoviesIds()[0])
print (getJsonTvSeriesIds()[0])
print (getJsonPersonIds()[0])